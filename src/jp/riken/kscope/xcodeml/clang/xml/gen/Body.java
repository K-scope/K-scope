//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.01.08 at 01:05:45 AM JST 
//


package jp.riken.kscope.xcodeml.clang.xml.gen;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import jp.riken.kscope.xcodeml.clang.xml.*;



/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;group ref="{}statements" maxOccurs="unbounded" minOccurs="0"/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "statements"
})
@XmlRootElement(name = "body")
public class Body
    implements IXmlNode
{

    @XmlElements({
        @XmlElement(name = "exprStatement", type = ExprStatement.class),
        @XmlElement(name = "compoundStatement", type = CompoundStatement.class),
        @XmlElement(name = "ifStatement", type = IfStatement.class),
        @XmlElement(name = "whileStatement", type = WhileStatement.class),
        @XmlElement(name = "doStatement", type = DoStatement.class),
        @XmlElement(name = "forStatement", type = ForStatement.class),
        @XmlElement(name = "breakStatement", type = BreakStatement.class),
        @XmlElement(name = "continueStatement", type = ContinueStatement.class),
        @XmlElement(name = "returnStatement", type = ReturnStatement.class),
        @XmlElement(name = "gotoStatement", type = GotoStatement.class),
        @XmlElement(name = "statementLabel", type = StatementLabel.class),
        @XmlElement(name = "switchStatement", type = SwitchStatement.class),
        @XmlElement(name = "caseLabel", type = CaseLabel.class),
        @XmlElement(name = "defaultLabel", type = DefaultLabel.class),
        @XmlElement(name = "pragma", type = Pragma.class),
        @XmlElement(name = "text", type = Text.class),
        @XmlElement(name = "gccRangedCaseLabel", type = GccRangedCaseLabel.class),
        @XmlElement(name = "gccAsmStatement", type = GccAsmStatement.class)
    })
    protected List<IXmlNode> statements;

    /**
     * Gets the value of the statements property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the statements property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getStatements().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ExprStatement }
     * {@link CompoundStatement }
     * {@link IfStatement }
     * {@link WhileStatement }
     * {@link DoStatement }
     * {@link ForStatement }
     * {@link BreakStatement }
     * {@link ContinueStatement }
     * {@link ReturnStatement }
     * {@link GotoStatement }
     * {@link StatementLabel }
     * {@link SwitchStatement }
     * {@link CaseLabel }
     * {@link DefaultLabel }
     * {@link Pragma }
     * {@link Text }
     * {@link GccRangedCaseLabel }
     * {@link GccAsmStatement }
     * 
     * 
     */
    public List<IXmlNode> getStatements() {
        if (statements == null) {
            statements = new ArrayList<IXmlNode>();
        }
        return this.statements;
    }



	@Override
	public boolean enter(jp.riken.kscope.xcodeml.clang.xml.IXmlVisitor visitor) {
        return (visitor.enter(this));
	}

	@Override
	public void leave(jp.riken.kscope.xcodeml.clang.xml.IXmlVisitor visitor) {
        visitor.leave(this);
	}
}
