//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.01.08 at 01:05:45 AM JST 
//


package jp.riken.kscope.xcodeml.clang.xml.gen;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import jp.riken.kscope.xcodeml.clang.xml.*;



/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;group ref="{}expressions"/>
 *         &lt;group ref="{}expressions"/>
 *         &lt;group ref="{}expressions" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attGroup ref="{}BaseExpression"/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "content"
})
@XmlRootElement(name = "condExpr")
public class CondExpr implements IXmlNode
{

    @XmlElementRefs({
        @XmlElementRef(name = "commaExpr", type = CommaExpr.class, required = false),
        @XmlElementRef(name = "castExpr", type = CastExpr.class, required = false),
        @XmlElementRef(name = "asgModExpr", type = AsgModExpr.class, required = false),
        @XmlElementRef(name = "asgBitXorExpr", type = AsgBitXorExpr.class, required = false),
        @XmlElementRef(name = "funcAddr", type = FuncAddr.class, required = false),
        @XmlElementRef(name = "addrOfExpr", type = AddrOfExpr.class, required = false),
        @XmlElementRef(name = "preIncrExpr", type = PreIncrExpr.class, required = false),
        @XmlElementRef(name = "asgMinusExpr", type = AsgMinusExpr.class, required = false),
        @XmlElementRef(name = "RshiftExpr", type = RshiftExpr.class, required = false),
        @XmlElementRef(name = "coArrayAssignExpr", type = CoArrayAssignExpr.class, required = false),
        @XmlElementRef(name = "xmpDescOf", type = XmpDescOf.class, required = false),
        @XmlElementRef(name = "memberRef", type = MemberRef.class, required = false),
        @XmlElementRef(name = "plusExpr", type = PlusExpr.class, required = false),
        @XmlElementRef(name = "gccCompoundExpr", type = GccCompoundExpr.class, required = false),
        @XmlElementRef(name = "LshiftExpr", type = LshiftExpr.class, required = false),
        @XmlElementRef(name = "intConstant", type = IntConstant.class, required = false),
        @XmlElementRef(name = "bitXorExpr", type = BitXorExpr.class, required = false),
        @XmlElementRef(name = "stringConstant", type = StringConstant.class, required = false),
        @XmlElementRef(name = "sizeOfExpr", type = SizeOfExpr.class, required = false),
        @XmlElementRef(name = "assignExpr", type = AssignExpr.class, required = false),
        @XmlElementRef(name = "logOrExpr", type = LogOrExpr.class, required = false),
        @XmlElementRef(name = "minusExpr", type = MinusExpr.class, required = false),
        @XmlElementRef(name = "logNEQExpr", type = LogNEQExpr.class, required = false),
        @XmlElementRef(name = "logLTExpr", type = LogLTExpr.class, required = false),
        @XmlElementRef(name = "postDecrExpr", type = PostDecrExpr.class, required = false),
        @XmlElementRef(name = "logNotExpr", type = LogNotExpr.class, required = false),
        @XmlElementRef(name = "modExpr", type = ModExpr.class, required = false),
        @XmlElementRef(name = "mulExpr", type = MulExpr.class, required = false),
        @XmlElementRef(name = "asgBitOrExpr", type = AsgBitOrExpr.class, required = false),
        @XmlElementRef(name = "longlongConstant", type = LonglongConstant.class, required = false),
        @XmlElementRef(name = "memberArrayRef", type = MemberArrayRef.class, required = false),
        @XmlElementRef(name = "bitNotExpr", type = BitNotExpr.class, required = false),
        @XmlElementRef(name = "condExpr", type = CondExpr.class, required = false),
        @XmlElementRef(name = "arrayAddr", type = ArrayAddr.class, required = false),
        @XmlElementRef(name = "compoundValueAddr", type = CompoundValueAddr.class, required = false),
        @XmlElementRef(name = "logGEExpr", type = LogGEExpr.class, required = false),
        @XmlElementRef(name = "divExpr", type = DivExpr.class, required = false),
        @XmlElementRef(name = "memberAddr", type = MemberAddr.class, required = false),
        @XmlElementRef(name = "logGTExpr", type = LogGTExpr.class, required = false),
        @XmlElementRef(name = "asgMulExpr", type = AsgMulExpr.class, required = false),
        @XmlElementRef(name = "floatConstant", type = FloatConstant.class, required = false),
        @XmlElementRef(name = "bitAndExpr", type = BitAndExpr.class, required = false),
        @XmlElementRef(name = "moeConstant", type = MoeConstant.class, required = false),
        @XmlElementRef(name = "gccAlignOfExpr", type = GccAlignOfExpr.class, required = false),
        @XmlElementRef(name = "postIncrExpr", type = PostIncrExpr.class, required = false),
        @XmlElementRef(name = "varAddr", type = VarAddr.class, required = false),
        @XmlElementRef(name = "asgBitAndExpr", type = AsgBitAndExpr.class, required = false),
        @XmlElementRef(name = "asgRshiftExpr", type = AsgRshiftExpr.class, required = false),
        @XmlElementRef(name = "gccLabelAddr", type = GccLabelAddr.class, required = false),
        @XmlElementRef(name = "compoundValue", type = CompoundValueExpr.class, required = false),
        @XmlElementRef(name = "Var", type = Var.class, required = false),
        @XmlElementRef(name = "pointerRef", type = PointerRef.class, required = false),
        @XmlElementRef(name = "logEQExpr", type = LogEQExpr.class, required = false),
        @XmlElementRef(name = "subArrayRef", type = SubArrayRef.class, required = false),
        @XmlElementRef(name = "builtin_op", type = BuiltinOp.class, required = false),
        @XmlElementRef(name = "arrayRef", type = ArrayRef.class, required = false),
        @XmlElementRef(name = "asgDivExpr", type = AsgDivExpr.class, required = false),
        @XmlElementRef(name = "functionCall", type = FunctionCall.class, required = false),
        @XmlElementRef(name = "coArrayRef", type = CoArrayRef.class, required = false),
        @XmlElementRef(name = "asgLshiftExpr", type = AsgLshiftExpr.class, required = false),
        @XmlElementRef(name = "logAndExpr", type = LogAndExpr.class, required = false),
        @XmlElementRef(name = "unaryMinusExpr", type = UnaryMinusExpr.class, required = false),
        @XmlElementRef(name = "bitOrExpr", type = BitOrExpr.class, required = false),
        @XmlElementRef(name = "asgPlusExpr", type = AsgPlusExpr.class, required = false),
        @XmlElementRef(name = "preDecrExpr", type = PreDecrExpr.class, required = false),
        @XmlElementRef(name = "logLEExpr", type = LogLEExpr.class, required = false),
        @XmlElementRef(name = "memberArrayAddr", type = MemberArrayAddr.class, required = false)
    })
    protected List<IXmlNode> content;
    @XmlAttribute(name = "type")
    protected String type;
    @XmlAttribute(name = "is_gccSyntax")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String isGccSyntax;
    @XmlAttribute(name = "is_modified")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String isModified;

    /**
     * Gets the rest of the content model. 
     * 
     * <p>
     * You are getting this "catch-all" property because of the following reason: 
     * The field name "IntConstant" is used by two different parts of a schema. See: 
     * line 220 of file:/home/hira/hira_works/feast/kscope/src/kscope_project/jaxb_generator/xcodeml_c_modify.xsd
     * line 220 of file:/home/hira/hira_works/feast/kscope/src/kscope_project/jaxb_generator/xcodeml_c_modify.xsd
     * <p>
     * To get rid of this property, apply a property customization to one 
     * of both of the following declarations to change their names: 
     * Gets the value of the content property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the content property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CommaExpr }
     * {@link CastExpr }
     * {@link AsgBitXorExpr }
     * {@link AsgModExpr }
     * {@link FuncAddr }
     * {@link AddrOfExpr }
     * {@link PreIncrExpr }
     * {@link AsgMinusExpr }
     * {@link RshiftExpr }
     * {@link CoArrayAssignExpr }
     * {@link XmpDescOf }
     * {@link MemberRef }
     * {@link PlusExpr }
     * {@link GccCompoundExpr }
     * {@link LshiftExpr }
     * {@link BitXorExpr }
     * {@link IntConstant }
     * {@link StringConstant }
     * {@link SizeOfExpr }
     * {@link LogOrExpr }
     * {@link AssignExpr }
     * {@link LogLTExpr }
     * {@link LogNEQExpr }
     * {@link MinusExpr }
     * {@link PostDecrExpr }
     * {@link LogNotExpr }
     * {@link ModExpr }
     * {@link AsgBitOrExpr }
     * {@link MulExpr }
     * {@link LonglongConstant }
     * {@link MemberArrayRef }
     * {@link BitNotExpr }
     * {@link CondExpr }
     * {@link ArrayAddr }
     * {@link LogGEExpr }
     * {@link CompoundValueAddr }
     * {@link DivExpr }
     * {@link MemberAddr }
     * {@link LogGTExpr }
     * {@link AsgMulExpr }
     * {@link FloatConstant }
     * {@link BitAndExpr }
     * {@link MoeConstant }
     * {@link GccAlignOfExpr }
     * {@link PostIncrExpr }
     * {@link VarAddr }
     * {@link AsgBitAndExpr }
     * {@link AsgRshiftExpr }
     * {@link GccLabelAddr }
     * {@link Var }
     * {@link CompoundValueExpr }
     * {@link PointerRef }
     * {@link LogEQExpr }
     * {@link SubArrayRef }
     * {@link ArrayRef }
     * {@link BuiltinOp }
     * {@link AsgDivExpr }
     * {@link FunctionCall }
     * {@link CoArrayRef }
     * {@link AsgLshiftExpr }
     * {@link LogAndExpr }
     * {@link UnaryMinusExpr }
     * {@link BitOrExpr }
     * {@link AsgPlusExpr }
     * {@link PreDecrExpr }
     * {@link LogLEExpr }
     * {@link MemberArrayAddr }
     * 
     * 
     */
    public List<IXmlNode> getContent() {
        if (content == null) {
            content = new ArrayList<IXmlNode>();
        }
        return this.content;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * Gets the value of the isGccSyntax property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIsGccSyntax() {
        return isGccSyntax;
    }

    /**
     * Sets the value of the isGccSyntax property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIsGccSyntax(String value) {
        this.isGccSyntax = value;
    }

    /**
     * Gets the value of the isModified property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIsModified() {
        return isModified;
    }

    /**
     * Sets the value of the isModified property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIsModified(String value) {
        this.isModified = value;
    }



	@Override
	public boolean enter(jp.riken.kscope.xcodeml.clang.xml.IXmlVisitor visitor) {
        return (visitor.enter(this));
	}

	@Override
	public void leave(jp.riken.kscope.xcodeml.clang.xml.IXmlVisitor visitor) {
        visitor.leave(this);
	}
}
